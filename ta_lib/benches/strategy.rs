use base::*;
use criterion::{criterion_group, criterion_main, Criterion};
use std::collections::VecDeque;

fn model(c: &mut Criterion) {
    let mut group = c.benchmark_group("model");
    let ts: Vec<i64> = vec![
        1679827200, 1679827500, 1679827800, 1679828100, 1679828400, 1679828700, 1679829000,
        1679829300, 1679829600, 1679829900, 1679830200, 1679830500, 1679830800, 1679831100,
        1679831400, 1679831700, 1679832000, 1679832300, 1679832600, 1679832900, 1679833200,
        1679833500, 1679833800, 1679834100, 1679834400, 1679834700, 1679835000, 1679835300,
        1679835600, 1679835900, 1679836200, 1679836500, 1679836800, 1679837100, 1679837400,
        1679837700, 1679838000, 1679838300, 1679838600, 1679838900, 1679839200, 1679839500,
        1679839800, 1679840100, 1679840400, 1679840700, 1679841000, 1679841300, 1679841600,
        1679841900, 1679842200,
    ];

    let open: Vec<f32> = vec![
        6.8430, 6.8660, 6.8635, 6.8610, 6.865, 6.8595, 6.8565, 6.852, 6.859, 6.86, 6.8580, 6.8605,
        6.8620, 6.867, 6.859, 6.8670, 6.8640, 6.8575, 6.8485, 6.8350, 7.1195, 7.136, 7.1405, 7.112,
        7.1095, 7.1520, 7.1310, 7.1550, 7.1480, 7.1435, 7.1405, 7.1440, 7.1495, 7.1515, 7.1415,
        7.1445, 7.1525, 7.1440, 7.1370, 7.1305, 7.1375, 7.1250, 7.1190, 7.1135, 7.1280, 7.1220,
        7.1330, 7.1225, 7.1180, 7.1250,
    ];

    let high: Vec<f32> = vec![
        6.8430, 6.8660, 6.8685, 6.8690, 6.865, 6.8595, 6.8565, 6.862, 6.859, 6.86, 6.8580, 6.8605,
        6.8620, 6.86, 6.859, 6.8670, 6.8640, 6.8575, 6.8485, 6.8450, 7.1195, 7.136, 7.1405, 7.112,
        7.1095, 7.1220, 7.1310, 7.1550, 7.1480, 7.1435, 7.1405, 7.1440, 7.1495, 7.1515, 7.1415,
        7.1445, 7.1525, 7.1440, 7.1370, 7.1305, 7.1375, 7.1250, 7.1190, 7.1135, 7.1280, 7.1220,
        7.1230, 7.1225, 7.1180, 7.1250,
    ];

    let low: Vec<f32> = vec![
        6.8380, 6.8430, 6.8595, 6.8640, 6.8435, 6.8445, 6.8510, 6.8560, 6.8520, 6.8530, 6.8550,
        6.8550, 6.8565, 6.8475, 6.8480, 6.8535, 6.8565, 6.8455, 6.8445, 6.8365, 7.1195, 7.136,
        7.1405, 7.112, 7.1095, 7.1220, 7.1310, 7.1550, 7.1480, 7.1435, 7.1405, 7.1440, 7.1495,
        7.1515, 7.1415, 7.1445, 7.1525, 7.1440, 7.1370, 7.1305, 7.1375, 7.1250, 7.1190, 7.1135,
        7.1280, 7.1220, 7.1230, 7.1225, 7.1180, 7.1250,
    ];

    let close: Vec<f32> = vec![
        6.855, 6.858, 6.86, 6.8480, 6.8575, 6.864, 6.8565, 6.8455, 6.8450, 6.8365, 6.8310, 6.8355,
        6.8360, 6.8345, 6.8285, 6.8395, 7.1135, 7.088, 7.112, 7.1205, 7.1195, 7.136, 7.1405, 7.112,
        7.1095, 7.1220, 7.1310, 7.1550, 7.1480, 7.1435, 7.1405, 7.1440, 7.1495, 7.1515, 7.1415,
        7.1445, 7.1525, 7.1440, 7.1370, 7.1305, 7.1375, 7.1250, 7.1190, 7.1135, 7.1280, 7.1220,
        7.1230, 7.1225, 7.1180, 7.1250,
    ];

    let volume: Vec<f32> = vec![
        60.855, 600.858, 60.86, 600.848, 60.8575, 60.864, 600.8565, 60.8455, 600.845, 600.8365,
        60.8310, 60.8355, 600.836, 60.8345, 600.8285, 60.8395, 700.1135, 70.088, 700.112, 70.1205,
        700.1195, 70.136, 70.1405, 70.112, 700.1095, 70.1220, 70.1310, 700.155, 70.1480, 70.1435,
        700.1405, 70.1440, 70.1495, 70.1515, 70.1415, 700.1445, 70.1525, 700.144, 70.1370,
        700.1305, 70.1375, 700.125, 700.119, 70.1135, 70.128, 700.122, 70.123, 700.1225, 70.118,
        70.125,
    ];

    group.bench_function("from_data", |b| {
        b.iter_batched_ref(
            || {
                let mut data: VecDeque<OHLCV> = VecDeque::with_capacity(200);

                let ohlcvs = open
                    .iter()
                    .zip(high.iter())
                    .zip(low.iter())
                    .zip(close.iter())
                    .zip(volume.iter())
                    .zip(ts.iter())
                    .map(|(((((&o, &h), &l), &c), &v), &t)| OHLCV {
                        ts: t,
                        open: o,
                        high: h,
                        low: l,
                        close: c,
                        volume: v,
                    })
                    .collect::<Vec<_>>();

                for ohlcv in ohlcvs {
                    data.push_back(ohlcv)
                }

                data
            },
            |data| OHLCVSeries::from_data(data),
            criterion::BatchSize::SmallInput,
        )
    });

    group.finish();
}

criterion_group!(strategy, model);
criterion_main!(strategy);
