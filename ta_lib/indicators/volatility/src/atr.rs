use crate::tr;
use core::Series;

pub fn atr(
    high: &Series<f32>,
    low: &Series<f32>,
    close: &Series<f32>,
    period: usize,
    smoothing: Option<&str>,
) -> Series<f32> {
    let tr = tr(high, low, close);

    match smoothing {
        Some("WMA") => tr.wma(period),
        Some("SMA") => tr.ma(period),
        Some("EMA") => tr.ema(period),
        Some("SMMA") | _ => tr.smma(period),
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_atr_smma() {
        let high = Series::from([
            6.8430, 6.8660, 6.8685, 6.8690, 6.865, 6.8595, 6.8565, 6.862, 6.859, 6.86, 6.8580,
            6.8605, 6.8620, 6.86, 6.859, 6.8670, 6.8640, 6.8575, 6.8485, 6.8450, 6.8365, 6.84,
            6.8385, 6.8365, 6.8345, 6.8395,
        ]);
        let low = Series::from([
            6.8380, 6.8430, 6.8595, 6.8640, 6.8435, 6.8445, 6.8510, 6.8560, 6.8520, 6.8530, 6.8550,
            6.8550, 6.8565, 6.8475, 6.8480, 6.8535, 6.8565, 6.8455, 6.8445, 6.8365, 6.8310, 6.8310,
            6.8345, 6.8325, 6.8275, 6.8285,
        ]);
        let close = Series::from([
            6.6430, 6.8595, 6.8680, 6.8650, 6.8445, 6.8560, 6.8565, 6.8590, 6.8530, 6.8575, 6.855,
            6.858, 6.86, 6.8480, 6.8575, 6.864, 6.8565, 6.8455, 6.8450, 6.8365, 6.8310, 6.8355,
            6.8360, 6.8345, 6.8285, 6.8395,
        ]);
        let period = 3;
        let smothing = Some("SMMA");
        let expected = [
            0.0050001144,
            0.07766677,
            0.054777943,
            0.038185332,
            0.032623433,
            0.02674891,
            0.019666044,
            0.01511071,
            0.01240713,
            0.010604743,
            0.0080697555,
            0.0072131166,
            0.006642024,
            0.008594777,
            0.00939657,
            0.010764452,
            0.009676199,
            0.010450827,
            0.008300454,
            0.008366844,
            0.007411334,
            0.00794099,
            0.0066273883,
            0.0057516545,
            0.006167759,
            0.007778558,
        ];

        let result: Vec<f32> = atr(&high, &low, &close, period, smothing).into();

        assert_eq!(result, expected);
    }
}
