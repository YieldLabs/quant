use core::prelude::*;

pub fn vi(
    high: &Series<f32>,
    low: &Series<f32>,
    atr: &Series<f32>,
    period: usize,
) -> (Series<f32>, Series<f32>) {
    let vmp = (high - low.shift(1)).abs().sum(period);
    let vmm = (low - high.shift(1)).abs().sum(period);
    let sumatr = atr.sum(period);

    (vmp / &sumatr, vmm / &sumatr)
}

#[cfg(test)]
mod tests {
    use super::*;
    use volatility::atr;

    #[test]
    fn test_vi() {
        let high = Series::from([
            7.1135, 7.1135, 7.116, 7.1225, 7.121, 7.136, 7.142, 7.1405, 7.1125, 7.1360, 7.1350,
            7.1550, 7.1590, 7.1505, 7.1460, 7.1505, 7.1555, 7.1575, 7.1550, 7.1445, 7.1540, 7.1525,
            7.1495, 7.1390, 7.1375, 7.1395, 7.1290, 7.1280, 7.1280, 7.1355, 7.1280, 7.1310, 7.1275,
            7.1250, 7.1270, 7.1230, 7.1210, 7.1325, 7.1355, 7.142, 7.14, 7.1260, 7.1870, 7.1670,
            7.1580,
        ]);
        let low = Series::from([
            7.0935, 7.088, 7.088, 7.1075, 7.1135, 7.1185, 7.119, 7.112, 7.1, 7.1055, 7.1160,
            7.1285, 7.1480, 7.1375, 7.1370, 7.1405, 7.1440, 7.1460, 7.1375, 7.1355, 7.1440, 7.1420,
            7.1365, 7.1280, 7.1305, 7.1250, 7.1145, 7.1035, 7.1135, 7.1175, 7.1220, 7.1225, 7.1180,
            7.1180, 7.1125, 7.1055, 7.1115, 7.12, 7.126, 7.1295, 7.114, 7.1160, 7.1235, 7.1565,
            7.1510,
        ]);
        let close = Series::from([
            7.1135, 7.088, 7.112, 7.1205, 7.1195, 7.136, 7.1405, 7.112, 7.1095, 7.1220, 7.1310,
            7.1550, 7.1480, 7.1435, 7.1405, 7.1440, 7.1495, 7.1515, 7.1415, 7.1445, 7.1525, 7.1440,
            7.1370, 7.1305, 7.1375, 7.1250, 7.1190, 7.1135, 7.1280, 7.1220, 7.1230, 7.1225, 7.1180,
            7.1250, 7.1230, 7.1130, 7.1210, 7.13, 7.134, 7.132, 7.116, 7.1235, 7.1645, 7.1565,
            7.1560,
        ]);
        let atr_period = 1;
        let atr = atr(&high, &low, &close, Smooth::SMMA, atr_period);
        let expected_vip = vec![
            0.0, 0.43955734, 0.65306014, 1.2043772, 1.5049572, 1.7625201, 1.2395816, 0.9782591,
            0.7109351, 0.8111933, 1.0645188, 1.375, 1.7521985, 1.425732, 1.2575788, 0.7656315,
            1.2131265, 1.2727259, 0.92591983, 0.7763138, 0.94520944, 1.152558, 1.0298488,
            0.5362257, 0.62902236, 0.64616036, 0.62500995, 0.49532968, 0.7850477, 1.052628,
            1.4805361, 1.2769195, 1.0208421, 0.8399931, 0.67742383, 0.6794884, 0.84336615,
            1.1898645, 1.6507773, 1.5217338, 0.875, 0.7938198, 0.93969786, 1.5059549, 1.4320977,
        ];
        let expected_vim = vec![
            0.0, 0.5604427, 0.69387966, 0.8686167, 0.851491, 0.49999404, 0.5937435, 0.71738863,
            1.3671834, 1.0839163, 1.0887067, 0.4407908, 0.5929277, 0.69307977, 1.2727364,
            1.2656316, 0.8360589, 0.65151364, 0.8888797, 1.289477, 1.09589, 1.0847491, 0.85074157,
            1.4347773, 1.4838799, 1.3076822, 1.277769, 1.17757, 1.2149612, 0.8859684, 1.0,
            0.90768373, 1.3333334, 1.1199908, 1.1290396, 1.1153836, 1.096391, 0.8607523,
            0.60318494, 0.39130375, 0.84375745, 1.1958766, 0.54774135, 0.6785706, 0.6049367,
        ];

        let (vip, vim) = vi(&high, &low, &atr, 3);
        let vvip: Vec<f32> = vip.into();
        let vvim: Vec<f32> = vim.into();

        assert_eq!(vvip, expected_vip);
        assert_eq!(vvim, expected_vim);
    }
}
